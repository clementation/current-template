/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkIndexRouteImport } from './routes/work.index'
import { Route as GalleryIndexRouteImport } from './routes/gallery.index'
import { Route as WorkItemIdRouteImport } from './routes/work.$itemId'
import { Route as GalleryItemIdRouteImport } from './routes/gallery.$itemId'

const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkIndexRoute = WorkIndexRouteImport.update({
  id: '/work/',
  path: '/work/',
  getParentRoute: () => rootRouteImport,
} as any)
const GalleryIndexRoute = GalleryIndexRouteImport.update({
  id: '/gallery/',
  path: '/gallery/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkItemIdRoute = WorkItemIdRouteImport.update({
  id: '/work/$itemId',
  path: '/work/$itemId',
  getParentRoute: () => rootRouteImport,
} as any)
const GalleryItemIdRoute = GalleryItemIdRouteImport.update({
  id: '/gallery/$itemId',
  path: '/gallery/$itemId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/gallery/$itemId': typeof GalleryItemIdRoute
  '/work/$itemId': typeof WorkItemIdRoute
  '/gallery': typeof GalleryIndexRoute
  '/work': typeof WorkIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/gallery/$itemId': typeof GalleryItemIdRoute
  '/work/$itemId': typeof WorkItemIdRoute
  '/gallery': typeof GalleryIndexRoute
  '/work': typeof WorkIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/gallery/$itemId': typeof GalleryItemIdRoute
  '/work/$itemId': typeof WorkItemIdRoute
  '/gallery/': typeof GalleryIndexRoute
  '/work/': typeof WorkIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/gallery/$itemId'
    | '/work/$itemId'
    | '/gallery'
    | '/work'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/gallery/$itemId'
    | '/work/$itemId'
    | '/gallery'
    | '/work'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/gallery/$itemId'
    | '/work/$itemId'
    | '/gallery/'
    | '/work/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  GalleryItemIdRoute: typeof GalleryItemIdRoute
  WorkItemIdRoute: typeof WorkItemIdRoute
  GalleryIndexRoute: typeof GalleryIndexRoute
  WorkIndexRoute: typeof WorkIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work/': {
      id: '/work/'
      path: '/work'
      fullPath: '/work'
      preLoaderRoute: typeof WorkIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gallery/': {
      id: '/gallery/'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work/$itemId': {
      id: '/work/$itemId'
      path: '/work/$itemId'
      fullPath: '/work/$itemId'
      preLoaderRoute: typeof WorkItemIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gallery/$itemId': {
      id: '/gallery/$itemId'
      path: '/gallery/$itemId'
      fullPath: '/gallery/$itemId'
      preLoaderRoute: typeof GalleryItemIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  GalleryItemIdRoute: GalleryItemIdRoute,
  WorkItemIdRoute: WorkItemIdRoute,
  GalleryIndexRoute: GalleryIndexRoute,
  WorkIndexRoute: WorkIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
